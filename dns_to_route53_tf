#!/usr/bin/env ruby

#    DNS zone file to AWS route53 terraform is a script to convert from
#    standard DNS to AWS Route 53 in a Terraform file
#    Copyright (C) 2017 Marc Millien
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

def usage
  puts <<-EOF.gsub(/^ */, '')
    Usage: #{$PROGRAM_NAME} domain.com
    \tSTDIN: the DNS zone

    Example: #{$PROGRAM_NAME} domain.com
    \twww 10800 IN CNAME www.google.fr
  EOF
  exit 1
end

usage if ARGV[0] =~ /help/ || ARGV[0].nil?
domain = ARGV.shift
until ARGV.empty?
  arg = ARGV.shift
  case arg
  when '--import'
    import = true
  when '--gandi'
    provider = 'gandi'
  else
    STDERR.puts "Argument \"#{arg}\" unknown !"
    usage
  end
end
import_token = ENV['TF_CONVERTER_DOMAIN_ID'] if import
terraform_zone_id = domain.tr('.', '-')

puts <<-EOF.gsub(/^\s{2}/, '')
  resource "gandi_zone" "#{terraform_zone_id}" {
    name = "#{domain}"
  }\n
  resource "gandi_domainattachment" "#{terraform_zone_id}" {
    domain = "#{domain}"
    zone = "${gandi_zone.#{terraform_zone_id}.id}"
  }\n
EOF

loop do
  records = {}
  interrupted = false
  begin
    STDIN.each do |line|
      break if line =~ /^$/
      dns_entry = line.split
      name = dns_entry[0]
      ttl = dns_entry[1]
      type = dns_entry[3]
      value = dns_entry[4..-1].join(' ').tr('"', '')

      records[name] = {} if records[name].nil?
      records[name][type] = {} if records[name][type].nil?
      records[name][type][:ttl] = ttl
      if records[name][type][:value].nil?
        records[name][type][:value] = value
      else
        records[name][type][:value] = [records[name][type][:value]] if records[name][type][:value].class == String
        records[name][type][:value] << value
      end
    end
  rescue Interrupt
    interrupted = true
  end

  records.each do |name, type_h|
    type_h.each do |type, record|
      name = '' if name == '@'
      id = "#{name}-#{terraform_zone_id}".tr('._', '-')
      id = terraform_zone_id if name.empty?
      ttl = record[:ttl]
      value = "\"#{record[:value]}\""
      if record[:value].class == Array
        value = "\n"
        record[:value].each do |v|
          value += "\"#{v}\",\n".rjust(v.length + 16)
        end
        value += ' ' * 10
      end

      puts <<-EOF.gsub(/^\s{8}/, '')
        resource "gandi_zonerecord" "#{id}-#{type}" {
          zone    = "${gandi_zone.#{terraform_zone_id}.id}"
          name    = "#{name}"
          type    = "#{type}"
          ttl     = "#{ttl}"
          values  = [#{value}]
        }\n
      EOF

      if import and provider == 'gandi'
        `terraform import gandi_zonerecord.#{id}-#{type} #{import_token}/#{name}/#{type}`
      end
    end
  end

  begin
    exit 0 if STDIN.eof?
  rescue Interrupt
    interrupted = true
  end
  exit 0 if interrupted
end
